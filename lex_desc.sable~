//Jon Sims, Graham Baker, and Jacob Imlay
Package MiniJava;

Helpers
    digit = ['0'..'9'];
    alpha = ['a'..'z'] | ['A'..'Z'];
    tab = 9;
    cr = 10;
    lf = 13;
    allchar = [' '..'~'];       // All digits, letters, punctuation
    eol = cr | lf;
    white = ' ' | tab | eol;
    not_star = [allchar - '*'] | white;
    not_slash = [allchar - '/'] | white;
    not_star_or_slash = [allchar - ['*' + '/']] | eol;
    
Tokens
    plus = '+';
    minus = '-';
    star = '*';
    not = '!';
    and = '&&';
    lt = '<';
    asm = '=';
    equals = '==';
    comma = ',';
    semi = ';';
    dot = '.';
    lparen = '(';
    rparen = ')';
    lbracket = '[';
    rbracket = ']';
    lbrace = '{';
    rbrace = '}';
    boolean = 'boolean';
    clas = 'class';
    else = 'else';
    extends = 'extends';
    false = 'false';
    if = 'if';
    int = 'int';
    length = 'length';
    main = 'main';
    new = 'new';
    public = 'public';
    return = 'return';
    static = 'static';
    string = 'String';
    args = 'a';
    print = 'System.out.println';
    this = 'this';
    true = 'true';
    void = 'void';
    while = 'while';
    id = (alpha) ((alpha) | (digit) | '_')*;
    num = (['1'..'9']digit*) | '0';
    whitespace = white+;
    block_comment = '/*' not_star+ '*'+ (not_star_or_slash not_star* '*'+)* '/';
    eol_comment = '//' (allchar | tab)* eol;

Ignored Tokens
    whitespace,
    block_comment,
    eol_comment;

Productions
    program {-> program} = {program} class_declaration* {-> New program([class_declaration.class_decl])};

    class_declaration {-> class_decl} = {main_class} clas id [lbr1]:lbrace public static void main lparen string lbracket rbracket args rparen [lbr2]:lbrace stm [rbr1]:rbrace [rbr2]:rbrace {-> New class_decl.main(id, stm.stmt)}
   |  {class_dec} clas id lbrace var_declaration* method_declaration* rbrace {-> New class_decl.base(id, [var_declaration.var_decl], [method_declaration.method])}
        | {class_dec_extend} clas [id1]:id extends [id2]:id lbrace var_declaration* method_declaration* rbrace {-> New class_decl.sub(id1, id2, [var_declaration.var_decl], [method_declaration.method])};

    var_declaration {-> var_decl} = {var_init} type id semi {-> New var_decl(type.type, id)}
        | {var_dec} type id asm exp semi {-> New var_decl(type.type, id)};

    arg_declaration {-> formal*} = {var_dec} type id arg_declarationp* {-> [New formal(type.type,id), arg_declarationp.formal] };

    arg_declarationp {-> formal}  = {var_dec} comma type id {-> New formal(type.type,id)};

    method_declaration {-> method} = {method_dec} public type id lparen arg_declaration? rparen lbrace var_declaration* stm* rbrace {-> New method(type.type, id, [arg_declaration.formal], [var_declaration.var_decl],[stm.stmt])};  

        stm {-> stmt} = {bracket} lbrace stm* rbrace {-> New stmt.block([stm.stmt])}// [stm2]:stm?
        | {if} if lparen exp rparen [stm1]:stm else [stm2]:stm {-> New stmt.if(exp.exp, stm1.stmt, stm2.stmt)} // [stm3]:stm?// stms
        | {while} while lparen exp rparen stm {-> New stmt.while(exp.exp, stm.stmt)}
        | {print} print lparen exp rparen semi {-> New stmt.print(exp.exp)}
        | {assign} id asm exp semi {-> New stmt.asmt(id, exp.exp)}// stm?
        | {assign_array} id lbracket [exp1]:exp rbracket asm [exp2]:exp semi {-> New stmt.array_asmt(id, exp1.exp, exp2.exp)}// stm?
        // | {var_dec} var_declaration {-> stm}// stm?
        | {ret} return exp semi {-> New stmt.return(exp.exp)};


    type {-> type} = {bool} boolean {-> New type.bool()}
        | {int} int{-> New type.int()}
	| {arr} int lbracket rbracket {-> New type.int_array()}
        | {obj} id {-> New type.user(id)};

    exp {-> exp} = {lt} exp_lt {-> exp_lt.exp};

    exp_lt {-> exp}= {lt} exp_lt lt exp_and {-> New exp.lt(exp_lt.exp,exp_and.exp)}
    	| {and} exp_and {-> exp_and.exp};    

    exp_and {-> exp} = {add} exp_add {-> exp_add.exp}
    	| {and} exp_and and exp_add{-> New exp.and(exp_and.exp,exp_add.exp)} ;

    exp_add {-> exp} = {add} exp_add plus exp_mult {-> New exp.plus(exp_add.exp,exp_mult.exp)}
    	| {minus} exp_add minus exp_mult {-> New exp.minus(exp_add.exp,exp_mult.exp)}
	| {mult} exp_mult {-> exp_mult.exp};

    exp_mult {-> exp} = {mult} exp_mult star exp_not {-> New exp.times(exp_mult.exp,exp_not.exp)}	
    	| {not} exp_not {-> exp_not.exp};

    exp_not {-> exp} = {not} not exp_not {-> New exp.not(exp_not.exp)}
        | {term} term {-> term.exp};

    term {-> exp} = {arr_exp} term lbracket exp rbracket {-> New exp.ref(term.exp,exp.exp)}
        | {method_call} method_call {-> method_call.exp}
        | {int} num {-> New exp.num(num)}
        | {parens} lparen exp rparen {-> exp.exp}
        | {true} true {-> New exp.true()}
        | {false} false {-> New exp.false()}
        | {id} id {-> New exp.id(id)}
     	| {this} this {-> New exp.this()}
        | {arr_declaration} new int lbracket exp rbracket {-> New exp.alloc(exp.exp)}
        | {new_obj} new id lparen rparen  {-> New exp.new(id)};

    exp_list {-> exp*} = {exp_list} exp {-> [exp.exp]}
    	     | {rest} exp comma exp_list  {-> [exp.exp, exp_list.exp]};

//    id {-> exp}= {id} id {-> New exp.id(id)};
    
    method_call {-> exp} = {arr_len} term dot length {-> New exp.length(term.exp)}
        | {general} term dot id lparen exp_list? rparen {-> New exp.method(term.exp, id, [exp_list.exp])};


Abstract Syntax Tree

    // A program is a list of class declarations

    program = class_decl*;
    
    // Three flavors of class declarations.  All we need to know about
    // the main class is its name and the stmt in main's body.  For the
    // others, we need their name, a list of their var_decls, and a list
    // of method declarations.  (For a subclass we need to know who it
    // extends as well.)
    
    class_decl =
          {main}    id stmt
        | {base}    id var_decl* method*
        | {sub}     id [extends]:id var_decl* method*;
        
    // For var_decls we need to know the var's type and name
    
    var_decl = type id;
    
    // Need to know a method's return type, its name, a list of
    // arguments, and the list of stmts in its body.
    
    method = type id formal* var_decl* stmt*;
    
    formal = type id;
    
    // Most of the types are literals.  We only need extra info for
    // the user-defined types -- the class name.
    
    type = {int} | {bool} | {int_array} | {user} id;
    
    // Most of these are pretty self explanatory.  Ids are variable or
    // array names, stmts are the bodies of ifs and whiles, and exps
    // are return values, tests, printed values, etc.
        
    stmt =
          {return}  exp
        | {block}   stmt*
        | {if}      exp [yes]:stmt [no]:stmt
        | {while}   exp stmt
        | {print}   exp
        | {asmt}    id exp
        | {array_asmt} id [idx]:exp [val]:exp;
         
    // Lots and lots of expressions.
         
    exp =
          {and}     [left]:exp [right]:exp
        | {lt}      [left]:exp [right]:exp
        | {plus}    [left]:exp [right]:exp
        | {minus}   [left]:exp [right]:exp
        | {times}   [left]:exp [right]:exp
        | {not}     exp
        | {ref}     [name]:exp [idx]:exp        // name[idx]
        | {length}  exp                         // exp.length()
        | {method}  [obj]:exp id [args]:exp*    // obj.id(args)
        | {num}     num
        | {id}      id
        | {true}    
        | {false}   
        | {this}    
        | {alloc}   exp                         // new int[exp]
        | {new}     id;                         // new id()





