/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogramprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AMainClassClassDeclaration */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAclassdecclassdeclaration1ClassDeclaration */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAclassdecclassdeclaration2ClassDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAclassdecclassdeclaration3ClassDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AAclassdecclassdeclaration4ClassDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce AAclassdecextendclassdeclaration1ClassDeclaration */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce AAclassdecextendclassdeclaration2ClassDeclaration */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAclassdecextendclassdeclaration3ClassDeclaration */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list);
            }
            break;
            case 10: /* reduce AAclassdecextendclassdeclaration4ClassDeclaration */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list);
            }
            break;
            case 11: /* reduce AVarInitVarDeclaration */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list);
            }
            break;
            case 12: /* reduce AVarDecVarDeclaration */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list);
            }
            break;
            case 13: /* reduce AAvardecargdeclaration1ArgDeclaration */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AAvardecargdeclaration2ArgDeclaration */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list);
            }
            break;
            case 15: /* reduce AVarDecArgDeclarationp */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AAmethoddecmethoddeclaration1MethodDeclaration */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AAmethoddecmethoddeclaration2MethodDeclaration */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce AAmethoddecmethoddeclaration3MethodDeclaration */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce AAmethoddecmethoddeclaration4MethodDeclaration */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AAmethoddecmethoddeclaration5MethodDeclaration */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce AAmethoddecmethoddeclaration6MethodDeclaration */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list);
            }
            break;
            case 22: /* reduce AAmethoddecmethoddeclaration7MethodDeclaration */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list);
            }
            break;
            case 23: /* reduce AAmethoddecmethoddeclaration8MethodDeclaration */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list);
            }
            break;
            case 24: /* reduce AAbracketstm1Stm */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list);
            }
            break;
            case 25: /* reduce AAbracketstm2Stm */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list);
            }
            break;
            case 26: /* reduce AIfStm */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list);
            }
            break;
            case 27: /* reduce AWhileStm */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list);
            }
            break;
            case 28: /* reduce APrintStm */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list);
            }
            break;
            case 29: /* reduce AAssignStm */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list);
            }
            break;
            case 30: /* reduce AAssignArrayStm */
            {
                ArrayList<Object> list = new30();
                push(goTo(6), list);
            }
            break;
            case 31: /* reduce ABoolType */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list);
            }
            break;
            case 32: /* reduce AIntType */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list);
            }
            break;
            case 33: /* reduce AArrType */
            {
                ArrayList<Object> list = new33();
                push(goTo(7), list);
            }
            break;
            case 34: /* reduce AObjType */
            {
                ArrayList<Object> list = new34();
                push(goTo(7), list);
            }
            break;
            case 35: /* reduce ALtExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list);
            }
            break;
            case 36: /* reduce ALtExpLt */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list);
            }
            break;
            case 37: /* reduce AAndExpLt */
            {
                ArrayList<Object> list = new37();
                push(goTo(9), list);
            }
            break;
            case 38: /* reduce AAddExpAnd */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list);
            }
            break;
            case 39: /* reduce AAndExpAnd */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list);
            }
            break;
            case 40: /* reduce AAddExpAdd */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list);
            }
            break;
            case 41: /* reduce AMinusExpAdd */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list);
            }
            break;
            case 42: /* reduce AMultExpAdd */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list);
            }
            break;
            case 43: /* reduce AMultExpMult */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list);
            }
            break;
            case 44: /* reduce ANotExpMult */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list);
            }
            break;
            case 45: /* reduce ANotExpNot */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list);
            }
            break;
            case 46: /* reduce ATermExpNot */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list);
            }
            break;
            case 47: /* reduce AArrExpTerm */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list);
            }
            break;
            case 48: /* reduce AMethodCallTerm */
            {
                ArrayList<Object> list = new48();
                push(goTo(14), list);
            }
            break;
            case 49: /* reduce AIntTerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(14), list);
            }
            break;
            case 50: /* reduce AParensTerm */
            {
                ArrayList<Object> list = new50();
                push(goTo(14), list);
            }
            break;
            case 51: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new51();
                push(goTo(14), list);
            }
            break;
            case 52: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list);
            }
            break;
            case 53: /* reduce AIdTerm */
            {
                ArrayList<Object> list = new53();
                push(goTo(14), list);
            }
            break;
            case 54: /* reduce AThisTerm */
            {
                ArrayList<Object> list = new54();
                push(goTo(14), list);
            }
            break;
            case 55: /* reduce AArrDeclarationTerm */
            {
                ArrayList<Object> list = new55();
                push(goTo(14), list);
            }
            break;
            case 56: /* reduce ANewObjTerm */
            {
                ArrayList<Object> list = new56();
                push(goTo(14), list);
            }
            break;
            case 57: /* reduce AExpListExpList */
            {
                ArrayList<Object> list = new57();
                push(goTo(15), list);
            }
            break;
            case 58: /* reduce ARestExpList */
            {
                ArrayList<Object> list = new58();
                push(goTo(15), list);
            }
            break;
            case 59: /* reduce AArrLenMethodCall */
            {
                ArrayList<Object> list = new59();
                push(goTo(16), list);
            }
            break;
            case 60: /* reduce AAgeneralmethodcall1MethodCall */
            {
                ArrayList<Object> list = new60();
                push(goTo(16), list);
            }
            break;
            case 61: /* reduce AAgeneralmethodcall2MethodCall */
            {
                ArrayList<Object> list = new61();
                push(goTo(16), list);
            }
            break;
            case 62: /* reduce ATerminal$ClassDeclaration */
            {
                ArrayList<Object> list = new62();
                push(goTo(17), list);
            }
            break;
            case 63: /* reduce ANonTerminal$ClassDeclaration */
            {
                ArrayList<Object> list = new63();
                push(goTo(17), list);
            }
            break;
            case 64: /* reduce ATerminal$VarDeclaration */
            {
                ArrayList<Object> list = new64();
                push(goTo(18), list);
            }
            break;
            case 65: /* reduce ANonTerminal$VarDeclaration */
            {
                ArrayList<Object> list = new65();
                push(goTo(18), list);
            }
            break;
            case 66: /* reduce ATerminal$MethodDeclaration */
            {
                ArrayList<Object> list = new66();
                push(goTo(19), list);
            }
            break;
            case 67: /* reduce ANonTerminal$MethodDeclaration */
            {
                ArrayList<Object> list = new67();
                push(goTo(19), list);
            }
            break;
            case 68: /* reduce ATerminal$ArgDeclarationp */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list);
            }
            break;
            case 69: /* reduce ANonTerminal$ArgDeclarationp */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list);
            }
            break;
            case 70: /* reduce ATerminal$Stm */
            {
                ArrayList<Object> list = new70();
                push(goTo(21), list);
            }
            break;
            case 71: /* reduce ANonTerminal$Stm */
            {
                ArrayList<Object> list = new71();
                push(goTo(21), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMainClassClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        PStmt pstmtNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList15.get(0);

        pclassdeclNode1 = new AMainClassDecl(tidNode2, pstmtNode3);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclassdecclassdeclaration1ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode3, listNode4);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAclassdecclassdeclaration2ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAclassdecclassdeclaration3ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAclassdecclassdeclaration4ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAclassdecextendclassdeclaration1ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode4, listNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassdecextendclassdeclaration2ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode5, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassdecextendclassdeclaration3ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode4, listNode6);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdecextendclassdeclaration4ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarInitVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVarDecVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAvardecargdeclaration1ArgDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
	if(pformalNode1 != null)
	{
	  listNode4.add(pformalNode1);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAvardecargdeclaration2ArgDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PFormal pformalNode1;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pformalNode1 != null)
	{
	  listNode5.add(pformalNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVarDecArgDeclarationp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAmethoddecmethoddeclaration1MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        PStmt pstmtNode6;
        {
            // Block
        PExp pexpNode7;
        pexpNode7 = (PExp)nodeArrayList8.get(0);

        pstmtNode6 = new AReturnStmt(pexpNode7);
        }
	if(pstmtNode6 != null)
	{
	  listNode8.add(pstmtNode6);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4, listNode5, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAmethoddecmethoddeclaration2MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        PStmt pstmtNode7;
        {
            // Block
        PExp pexpNode8;
        pexpNode8 = (PExp)nodeArrayList9.get(0);

        pstmtNode7 = new AReturnStmt(pexpNode8);
        }
	if(pstmtNode7 != null)
	{
	  listNode9.add(pstmtNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode6, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAmethoddecmethoddeclaration3MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        PStmt pstmtNode7;
        {
            // Block
        PExp pexpNode8;
        pexpNode8 = (PExp)nodeArrayList9.get(0);

        pstmtNode7 = new AReturnStmt(pexpNode8);
        }
	if(pstmtNode7 != null)
	{
	  listNode9.add(pstmtNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4, listNode6, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAmethoddecmethoddeclaration4MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        PStmt pstmtNode8;
        {
            // Block
        PExp pexpNode9;
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pstmtNode8 = new AReturnStmt(pexpNode9);
        }
	if(pstmtNode8 != null)
	{
	  listNode10.add(pstmtNode8);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode7, listNode10);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddecmethoddeclaration5MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStmt pstmtNode7;
        listNode6 = (LinkedList)nodeArrayList7.get(0);
        {
            // Block
        PExp pexpNode8;
        pexpNode8 = (PExp)nodeArrayList9.get(0);

        pstmtNode7 = new AReturnStmt(pexpNode8);
        }
	if(listNode6 != null)
	{
	  listNode9.addAll(listNode6);
	}
	if(pstmtNode7 != null)
	{
	  listNode9.add(pstmtNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4, listNode5, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddecmethoddeclaration6MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStmt pstmtNode8;
        listNode7 = (LinkedList)nodeArrayList8.get(0);
        {
            // Block
        PExp pexpNode9;
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pstmtNode8 = new AReturnStmt(pexpNode9);
        }
	if(listNode7 != null)
	{
	  listNode10.addAll(listNode7);
	}
	if(pstmtNode8 != null)
	{
	  listNode10.add(pstmtNode8);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode6, listNode10);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddecmethoddeclaration7MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PStmt pstmtNode8;
        listNode7 = (LinkedList)nodeArrayList8.get(0);
        {
            // Block
        PExp pexpNode9;
        pexpNode9 = (PExp)nodeArrayList10.get(0);

        pstmtNode8 = new AReturnStmt(pexpNode9);
        }
	if(listNode7 != null)
	{
	  listNode10.addAll(listNode7);
	}
	if(pstmtNode8 != null)
	{
	  listNode10.add(pstmtNode8);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4, listNode6, listNode10);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddecmethoddeclaration8MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PStmt pstmtNode9;
        listNode8 = (LinkedList)nodeArrayList9.get(0);
        {
            // Block
        PExp pexpNode10;
        pexpNode10 = (PExp)nodeArrayList11.get(0);

        pstmtNode9 = new AReturnStmt(pexpNode10);
        }
	if(listNode8 != null)
	{
	  listNode11.addAll(listNode8);
	}
	if(pstmtNode9 != null)
	{
	  listNode11.add(pstmtNode9);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode7, listNode11);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAbracketstm1Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstmtNode1 = new ABlockStmt(listNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAbracketstm2Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIfStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        PStmt pstmtNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtNode3 = (PStmt)nodeArrayList5.get(0);
        pstmtNode4 = (PStmt)nodeArrayList7.get(0);

        pstmtNode1 = new AIfStmt(pexpNode2, pstmtNode3, pstmtNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AWhileStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtNode3 = (PStmt)nodeArrayList5.get(0);

        pstmtNode1 = new AWhileStmt(pexpNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APrintStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new APrintStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAssignStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AAsmtStmt(tidNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAssignArrayStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pstmtNode1 = new AArrayAsmtStmt(tidNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArrType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntArrayType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AObjType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AUserType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ALtExpLt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAndExpLt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAddExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAndExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAddExpAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMinusExpAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMultExpAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMultExpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANotExpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANotExpNot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATermExpNot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AArrExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ARefExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMethodCallTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexpNode1 = new ANumExp(tnumNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AParensTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AThisTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AArrDeclarationTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new AAllocExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANewObjTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpNode1 = new ANewExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExpListExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ARestExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArrLenMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new ALengthExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAgeneralmethodcall1MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }

        pexpNode1 = new AMethodExp(pexpNode2, tidNode3, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAgeneralmethodcall2MethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new AMethodExp(pexpNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$ClassDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethod pmethodNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$ArgDeclarationp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFormal pformalNode1;
        pformalNode1 = (PFormal)nodeArrayList1.get(0);
	if(pformalNode1 != null)
	{
	  listNode2.add(pformalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$ArgDeclarationp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFormal pformalNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pformalNode2 = (PFormal)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pformalNode2 != null)
	{
	  listNode3.add(pformalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {36, SHIFT, 5}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 1}, {18, SHIFT, 1}, },
			{{-1, ERROR, 5}, {15, SHIFT, 7}, {20, SHIFT, 8}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 7}, {16, SHIFT, 9}, {17, SHIFT, 10}, {23, SHIFT, 11}, {27, SHIFT, 12}, {36, SHIFT, 13}, },
			{{-1, ERROR, 8}, {36, SHIFT, 19}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, {13, SHIFT, 20}, },
			{{-1, ERROR, 12}, {17, SHIFT, 10}, {23, SHIFT, 11}, {29, SHIFT, 21}, {36, SHIFT, 13}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 16}, {36, SHIFT, 23}, },
			{{-1, ERROR, 17}, {16, SHIFT, 24}, {17, SHIFT, 10}, {23, SHIFT, 11}, {27, SHIFT, 25}, {36, SHIFT, 13}, },
			{{-1, ERROR, 18}, {16, SHIFT, 28}, {27, SHIFT, 25}, },
			{{-1, ERROR, 19}, {15, SHIFT, 30}, },
			{{-1, ERROR, 20}, {14, SHIFT, 31}, },
			{{-1, ERROR, 21}, {34, SHIFT, 32}, },
			{{-1, ERROR, 22}, {36, SHIFT, 33}, },
			{{-1, ERROR, 23}, {6, SHIFT, 34}, {9, SHIFT, 35}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 25}, {17, SHIFT, 10}, {23, SHIFT, 11}, {36, SHIFT, 13}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 27}, {16, SHIFT, 36}, {27, SHIFT, 25}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 30}, {16, SHIFT, 37}, {17, SHIFT, 10}, {23, SHIFT, 11}, {27, SHIFT, 25}, {36, SHIFT, 13}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 32}, {25, SHIFT, 40}, },
			{{-1, ERROR, 33}, {11, SHIFT, 41}, },
			{{-1, ERROR, 34}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 38}, {16, SHIFT, 58}, {17, SHIFT, 10}, {23, SHIFT, 11}, {27, SHIFT, 25}, {36, SHIFT, 13}, },
			{{-1, ERROR, 39}, {16, SHIFT, 60}, {27, SHIFT, 25}, },
			{{-1, ERROR, 40}, {11, SHIFT, 61}, },
			{{-1, ERROR, 41}, {12, SHIFT, 62}, {17, SHIFT, 10}, {23, SHIFT, 11}, {36, SHIFT, 13}, },
			{{-1, ERROR, 42}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 43}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 45}, {23, SHIFT, 67}, {36, SHIFT, 68}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 50}, {9, SHIFT, 69}, },
			{{-1, REDUCE, 35}, {5, SHIFT, 70}, },
			{{-1, REDUCE, 37}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 72}, {1, SHIFT, 73}, },
			{{-1, REDUCE, 42}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {10, SHIFT, 75}, {13, SHIFT, 76}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 59}, {16, SHIFT, 77}, {27, SHIFT, 25}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 61}, {30, SHIFT, 78}, },
			{{-1, ERROR, 62}, {15, SHIFT, 79}, },
			{{-1, ERROR, 63}, {12, SHIFT, 80}, },
			{{-1, ERROR, 64}, {36, SHIFT, 81}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 66}, {12, SHIFT, 82}, },
			{{-1, ERROR, 67}, {13, SHIFT, 83}, },
			{{-1, ERROR, 68}, {11, SHIFT, 84}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 70}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 71}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 72}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 73}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 74}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 75}, {24, SHIFT, 90}, {36, SHIFT, 91}, },
			{{-1, ERROR, 76}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 78}, {13, SHIFT, 93}, },
			{{-1, ERROR, 79}, {15, SHIFT, 94}, {17, SHIFT, 10}, {22, SHIFT, 95}, {23, SHIFT, 11}, {28, SHIFT, 96}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 99}, },
			{{-1, ERROR, 80}, {15, SHIFT, 103}, },
			{{-1, REDUCE, 13}, {8, SHIFT, 104}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 83}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 84}, {12, SHIFT, 108}, },
			{{-1, REDUCE, 36}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 72}, {1, SHIFT, 73}, },
			{{-1, REDUCE, 40}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 41}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 91}, {11, SHIFT, 109}, },
			{{-1, ERROR, 92}, {14, SHIFT, 110}, },
			{{-1, ERROR, 93}, {14, SHIFT, 111}, },
			{{-1, ERROR, 94}, {15, SHIFT, 94}, {16, SHIFT, 112}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 95}, {11, SHIFT, 115}, },
			{{-1, ERROR, 96}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 97}, {11, SHIFT, 117}, },
			{{-1, ERROR, 98}, {11, SHIFT, 118}, },
			{{-1, REDUCE, 34}, {6, SHIFT, 119}, {13, SHIFT, 120}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 101}, {15, SHIFT, 94}, {17, SHIFT, 10}, {22, SHIFT, 95}, {23, SHIFT, 11}, {28, SHIFT, 121}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 99}, },
			{{-1, ERROR, 102}, {15, SHIFT, 94}, {22, SHIFT, 95}, {28, SHIFT, 123}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 103}, {15, SHIFT, 94}, {17, SHIFT, 10}, {22, SHIFT, 95}, {23, SHIFT, 11}, {28, SHIFT, 125}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 99}, },
			{{-1, ERROR, 104}, {17, SHIFT, 10}, {23, SHIFT, 11}, {36, SHIFT, 13}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 14}, {8, SHIFT, 104}, },
			{{-1, ERROR, 107}, {14, SHIFT, 130}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 109}, {3, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 131}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 111}, {36, SHIFT, 134}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 113}, {6, SHIFT, 119}, {13, SHIFT, 120}, },
			{{-1, ERROR, 114}, {15, SHIFT, 94}, {16, SHIFT, 135}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 115}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 116}, {9, SHIFT, 137}, },
			{{-1, ERROR, 117}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 118}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 119}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 120}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 121}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 122}, {15, SHIFT, 94}, {22, SHIFT, 95}, {28, SHIFT, 143}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 123}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 125}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 126}, {15, SHIFT, 94}, {17, SHIFT, 10}, {22, SHIFT, 95}, {23, SHIFT, 11}, {28, SHIFT, 146}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 99}, },
			{{-1, ERROR, 127}, {15, SHIFT, 94}, {22, SHIFT, 95}, {28, SHIFT, 148}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 128}, {36, SHIFT, 149}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 57}, {8, SHIFT, 150}, },
			{{-1, ERROR, 133}, {12, SHIFT, 151}, },
			{{-1, ERROR, 134}, {12, SHIFT, 152}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 136}, {12, SHIFT, 153}, },
			{{-1, ERROR, 137}, {16, SHIFT, 154}, },
			{{-1, ERROR, 138}, {12, SHIFT, 155}, },
			{{-1, ERROR, 139}, {12, SHIFT, 156}, },
			{{-1, ERROR, 140}, {9, SHIFT, 157}, },
			{{-1, ERROR, 141}, {14, SHIFT, 158}, },
			{{-1, ERROR, 142}, {9, SHIFT, 159}, },
			{{-1, ERROR, 143}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 144}, {9, SHIFT, 161}, },
			{{-1, ERROR, 145}, {9, SHIFT, 162}, },
			{{-1, ERROR, 146}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 147}, {15, SHIFT, 94}, {22, SHIFT, 95}, {28, SHIFT, 164}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 148}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 150}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 152}, {15, SHIFT, 167}, },
			{{-1, ERROR, 153}, {15, SHIFT, 94}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 155}, {9, SHIFT, 169}, },
			{{-1, ERROR, 156}, {15, SHIFT, 94}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 158}, {6, SHIFT, 171}, },
			{{-1, ERROR, 159}, {16, SHIFT, 172}, },
			{{-1, ERROR, 160}, {9, SHIFT, 173}, },
			{{-1, ERROR, 161}, {16, SHIFT, 174}, },
			{{-1, ERROR, 162}, {16, SHIFT, 175}, },
			{{-1, ERROR, 163}, {9, SHIFT, 176}, },
			{{-1, ERROR, 164}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, ERROR, 165}, {9, SHIFT, 178}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 167}, {15, SHIFT, 94}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 168}, {19, SHIFT, 180}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 171}, {3, SHIFT, 42}, {11, SHIFT, 43}, {21, SHIFT, 44}, {26, SHIFT, 45}, {32, SHIFT, 46}, {33, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 173}, {16, SHIFT, 182}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 176}, {16, SHIFT, 183}, },
			{{-1, ERROR, 177}, {9, SHIFT, 184}, },
			{{-1, ERROR, 178}, {16, SHIFT, 185}, },
			{{-1, ERROR, 179}, {16, SHIFT, 186}, },
			{{-1, ERROR, 180}, {15, SHIFT, 94}, {22, SHIFT, 95}, {31, SHIFT, 97}, {35, SHIFT, 98}, {36, SHIFT, 113}, },
			{{-1, ERROR, 181}, {9, SHIFT, 188}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 184}, {16, SHIFT, 189}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 186}, {16, SHIFT, 190}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 2}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 6}, },
			{{-1, 14}, {17, 26}, {38, 26}, {101, 26}, {126, 26}, },
			{{-1, 63}, },
			{{-1, 105}, {106, 129}, },
			{{-1, 15}, {18, 29}, {27, 29}, {39, 29}, {59, 29}, },
			{{-1, 100}, {102, 124}, {114, 124}, {122, 124}, {127, 124}, {147, 124}, {153, 168}, {156, 170}, {167, 179}, {180, 187}, },
			{{-1, 16}, {12, 22}, {25, 22}, {41, 64}, {104, 128}, },
			{{-1, 132}, {34, 50}, {43, 66}, {76, 92}, {83, 107}, {96, 116}, {115, 136}, {117, 138}, {118, 139}, {119, 140}, {120, 141}, {121, 142}, {123, 144}, {125, 145}, {143, 160}, {146, 163}, {148, 165}, {164, 177}, {171, 181}, },
			{{-1, 51}, },
			{{-1, 52}, {70, 85}, },
			{{-1, 53}, {71, 86}, },
			{{-1, 54}, {72, 87}, {73, 88}, },
			{{-1, 55}, {42, 65}, {74, 89}, },
			{{-1, 56}, },
			{{-1, 133}, {150, 166}, },
			{{-1, 57}, },
			{{-1, 4}, },
			{{-1, 17}, {30, 38}, {79, 101}, {103, 126}, },
			{{-1, 18}, {17, 27}, {30, 39}, {38, 59}, },
			{{-1, 106}, },
			{{-1, 102}, {94, 114}, {101, 122}, {103, 127}, {126, 147}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: '{', 'extends'",
			"expecting: '}', 'boolean', 'int', 'public', id",
			"expecting: '[', id",
			"expecting: 'boolean', 'int', 'static', id",
			"expecting: '{', '}', 'boolean', 'if', 'int', 'public', 'return', 'System.out.println', 'while', id",
			"expecting: '}', 'public'",
			"expecting: '{'",
			"expecting: ']'",
			"expecting: 'void'",
			"expecting: '=', ';'",
			"expecting: 'boolean', 'int', id",
			"expecting: 'main'",
			"expecting: '('",
			"expecting: '!', '(', 'false', 'new', 'this', 'true', id, num",
			"expecting: ')', 'boolean', 'int', id",
			"expecting: '+', '-', '*', '&&', '<', ',', ';', '.', ')', '[', ']'",
			"expecting: 'int', id",
			"expecting: ';'",
			"expecting: '<', ',', ';', ')', ']'",
			"expecting: '&&', '<', ',', ';', ')', ']'",
			"expecting: '+', '-', '&&', '<', ',', ';', ')', ']'",
			"expecting: '+', '-', '*', '&&', '<', ',', ';', ')', ']'",
			"expecting: 'String'",
			"expecting: ')'",
			"expecting: '['",
			"expecting: 'length', id",
			"expecting: '{', 'boolean', 'if', 'int', 'return', 'System.out.println', 'while', id",
			"expecting: ',', ')'",
			"expecting: '{', '}', 'if', 'System.out.println', 'while', id",
			"expecting: '=', '[', id",
			"expecting: '{', '}', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '{', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '!', '(', ')', 'false', 'new', 'this', 'true', id, num",
			"expecting: '{', '}', 'else', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '=', '['",
			"expecting: '}'",
			"expecting: '{', 'if', 'System.out.println', 'while', id",
			"expecting: '='",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 0, 3, 0, 4, 1, 0, 1, 5, 6, 1, 7, 8, 1, 4, 8, 9, 10, 11, 1, 12, 0, 13, 7, 8, 0, 8, 4, 1, 14, 15, 16, 7, 0, 0, 4, 8, 15, 17, 16, 16, 18, 19, 18, 18, 18, 18, 20, 21, 22, 23, 24, 24, 18, 18, 0, 8, 0, 25, 9, 26, 1, 24, 26, 27, 15, 7, 16, 16, 16, 16, 16, 28, 16, 0, 27, 29, 9, 30, 18, 16, 26, 22, 23, 24, 24, 24, 18, 15, 10, 10, 31, 15, 16, 15, 15, 32, 33, 29, 34, 29, 13, 30, 30, 10, 18, 35, 18, 1, 36, 37, 31, 16, 20, 16, 16, 16, 16, 16, 34, 16, 33, 16, 29, 34, 1, 30, 18, 18, 30, 26, 26, 36, 26, 38, 26, 26, 20, 10, 20, 16, 20, 20, 16, 34, 16, 30, 16, 18, 9, 39, 8, 20, 39, 36, 40, 38, 20, 38, 38, 20, 16, 20, 26, 39, 41, 36, 36, 16, 8, 38, 8, 8, 38, 20, 38, 38, 39, 20, 8, 8, 38, 8, 38, 36, 36, 8, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
